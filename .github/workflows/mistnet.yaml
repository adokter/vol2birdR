name: Mistnet

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-20.04, macos-14]
        include:
          - os: windows-2019
            cuda: 0
            library: mistnet.dll
            test: 
            make: "& 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild' mistnet.sln /t:Build /p:Configuration=Release"
            build: build/Release
            cmakevars:
            libext: .dll
            exeext: .exe
            fixlib:
            flavor: Release
            artifacts: mistnet.dll
            upload: Windows        
          - os: ubuntu-20.04
            library: libmistnet.so
            test: 
            make: make
            build: build
            cmakevars:
            libext:
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' libmistnet.so
            flavor: Release
            artifacts: libmistnet.so
            upload: Linux
          - os: macos-14
            library: libmistnet.dylib
            test: 
            make: make
            build: build
            cmakevars:
            libext: .dylib
            exeext:
            fixlib: install_name_tool -add_rpath @loader_path/. libmistnet.dylib
            flavor: Release
            artifacts: libmistnet.dylib
            upload: macOS
    steps:
      - uses: actions/checkout@v3
      - name: Create environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Free up 24GB of disk space
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: sudo rm -rf /usr/share/dotnet
      - name: Run cmake
        working-directory: ${{runner.workspace}}/build
        run: cmake -DCMAKE_BUILD_TYPE=${{matrix.flavor}} ${{ matrix.cmakevars }} ${{github.workspace}}/mistnet

      - name: Run make
        working-directory: ${{runner.workspace}}/build
        run: ${{matrix.make}}

      - name: Fix library
        working-directory: ${{runner.workspace}}/build
        run: ${{matrix.fixlib}}

      - name: Install libs
        working-directory: ${{runner.workspace}}
        run: |
          mkdir artifacts
          cp -R ${{matrix.build}}/${{matrix.artifacts}} artifacts
          rm -r build

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.upload}}
          path: ${{runner.workspace}}/artifacts

  upload:
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        name:
          [
            macOS,
            Linux,
            Windows
          ]
        include:
          - name: macOS
            artifact: macOS
            upload: macOS
            hw: cpu
          - name: Linux
            artifact: Linux
            upload: Linux
            hw: cpu
          - name: Windows
            artifact: Windows
            upload: Windows
            hw: cpu
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.artifact }}
      - uses: montudor/action-zip@v0.1.0
        with:
          args: zip -j -qq -r ./${{ matrix.artifact }}.zip ./${{ matrix.artifact }}
      - name: Upload to latest
        uses: keithweaver/aws-s3-github-action@v1.0.0
        with:
          command: cp
          source: ${{ matrix.artifact }}.zip
          destination: s3://vol2bird-builds/vol2birdr/${{ github.ref }}/latest/${{ matrix.upload }}-${{ matrix.hw }}.zip
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-1

